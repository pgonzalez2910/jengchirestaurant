re_M1xcpARc_CW14Xq4CW13QycmD2yrhEsEX




<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Jeng Chi Check Tracker</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/jspdf-autotable@3.5.28"></script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet"/>
  <style>
    body { font-family: 'Inter', sans-serif; background-color: #f3f4f6; }
    .tab-btn { padding:.75rem 1.5rem; cursor:pointer; font-weight:600; border-bottom:3px solid transparent; transition:border-color .2s, color .2s; }
    .tab-btn.active { border-bottom-color:#3b82f6; color:#3b82f6; }
    .modal { display:none; position:fixed; z-index:1000; inset:0; background:rgba(0,0,0,.4); justify-content:center; align-items:center; }
    .modal-content { background:#fff; padding:2rem; border-radius:12px; width:90%; max-width:520px; box-shadow:0 5px 15px rgba(0,0,0,.3); text-align:left; }
    .modal-actions { display:flex; justify-content:center; gap:.75rem; margin-top:1rem; }
    .grid-sm { display:grid; grid-template-columns: 1.2fr .9fr .9fr 1fr; gap:.5rem; }
    @media (max-width: 1024px){ .grid-sm{ grid-template-columns: 1fr 1fr; } }
    .btn { display:inline-flex; align-items:center; justify-content:center; font-weight:600; border-radius:.5rem; padding:.5rem .9rem; }
    .btn-primary { background:#2563eb; color:#fff; }
    .btn-ghost { background:#eef2ff; color:#374151; }
    .btn-danger { background:#ef4444; color:#fff; }
    .btn-outline { border:1px solid #cbd5e1; color:#111827; background:#fff; }
    .row-card { background:#fff; border:1px solid #e5e7eb; border-radius:.5rem; padding:.75rem; }
    .muted { color:#6b7280; font-size:.82rem; }
  </style>
</head>
<body class="bg-gray-100 p-8">

  <div class="max-w-6xl mx-auto bg-white shadow-xl rounded-lg p-6">
    <header class="text-center mb-8">
      <img id="company-logo" alt="Jeng Chi Logo" class="mx-auto h-20 mb-4">
      <h1 class="text-3xl font-bold text-blue-600">Inventory Management System</h1>
      <h2 class="text-xl font-semibold text-gray-800">Check & Invoice Tracker</h2>
    </header>

    <div class="flex justify-center border-b border-gray-200 mb-6 gap-6 overflow-x-auto">
      <button id="invoice-management-tab" class="tab-btn active">Invoice Management</button>
      <button id="view-invoices-tab" class="tab-btn">View Invoices</button>
      <button id="edit-check-tab" class="tab-btn">Edit Check</button>
      <button id="generate-report-tab" class="tab-btn">Generate Report</button>
    </div>

    <!-- Invoice Management -->
    <div id="invoice-management-section" class="tab-content">
      <div class="bg-gray-50 rounded-lg p-4 mb-4">
        <h3 class="text-lg font-semibold text-gray-800 mb-2">Add New Vendor</h3>
        <div class="flex flex-col sm:flex-row gap-4">
          <input type="text" id="newVendorName" placeholder="Enter New Vendor Name" class="flex-grow p-2 border border-gray-300 rounded-md">
          <button id="btnAddVendor" class="btn btn-primary">Add Vendor</button>
        </div>
      </div>

      <div class="bg-gray-50 rounded-lg p-4 mb-4">
        <h3 class="text-lg font-semibold text-gray-800 mb-3">Enter New Invoice Details</h3>

        <!-- Create Check -->
        <div class="bg-white border rounded-md p-4 mb-4">
          <h4 class="font-semibold text-gray-800 mb-2">Create Check</h4>
          <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
              <label class="block mb-1 text-sm font-medium">Check Number</label>
              <input type="text" id="newCheckNumber" class="w-full p-2 border border-gray-300 rounded-md" placeholder="e.g. 10321">
            </div>
            <div>
              <label class="block mb-1 text-sm font-medium">Check Date</label>
              <input type="date" id="newCheckDate" class="w-full p-2 border border-gray-300 rounded-md">
            </div>
            <div>
              <label class="block mb-1 text-sm font-medium">Check Amount ($)</label>
              <input type="number" step="0.01" id="newCheckAmount" class="w-full p-2 border border-gray-300 rounded-md">
            </div>
            <div>
              <label class="block mb-1 text-sm font-medium">Notes</label>
              <input type="text" id="newCheckNotes" class="w-full p-2 border border-gray-300 rounded-md" placeholder="Memo / notes (e.g. VOID)">
            </div>
          </div>
          <div class="flex items-center gap-2 mt-2">
            <input type="checkbox" id="chkVoid" class="h-4 w-4">
            <label for="chkVoid" class="text-sm">This is a <span class="font-semibold">void/empty</span> check (no invoices)</label>
          </div>
          <p class="muted mt-1">Enter a check number, and optional date/amount/notes. If “void/empty” is checked, you can save the check without invoices.</p>
        </div>

        <!-- MULTI-INVOICE EDITOR -->
        <div class="row-card mb-4">
          <div class="flex items-center justify-between mb-3">
            <h4 class="font-semibold text-gray-800">Invoices to Add</h4>
            <div class="flex gap-2">
              <button id="btnAddInvoiceRow" class="btn btn-outline">+ Add another invoice</button>
              <button id="btnClearInvoiceRows" class="btn btn-ghost">Clear</button>
            </div>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
            <div>
              <label class="block mb-1 text-sm font-medium">Default Vendor for new rows</label>
              <select id="defaultVendor" class="w-full p-2 border border-gray-300 rounded-md"></select>
            </div>
            <div class="muted flex items-end">Each row can still choose a different vendor.</div>
          </div>

          <div id="invoiceRows" class="space-y-3"></div>
          <p class="muted mt-2">You can add as many rows as needed; all will attach to the check you create above.</p>
        </div>

        <div class="flex flex-col md:flex-row gap-3 justify-center mt-6">
          <button id="btnSaveMultipleInvoices" class="btn btn-primary px-8">Save Invoices</button>
          <button id="btnSaveVoidCheck" class="btn btn-outline px-8">Save Void/Empty Check</button>
        </div>
      </div>
    </div>

    <!-- View Invoices -->
    <div id="view-invoices-section" class="tab-content hidden">
      <h3 class="text-lg font-semibold text-gray-800 mb-2">Invoice History</h3>
      <div class="flex flex-wrap gap-4 mb-4 items-end">
        <div>
          <label class="font-medium block mb-1">Filter by Vendor</label>
          <select id="invoiceVendorFilter" class="p-2 border border-gray-300 rounded-md min-w-[200px]">
            <option value="">-- All Vendors --</option>
          </select>
        </div>
        <div>
          <label class="font-medium block mb-1">Filter by Status</label>
          <select id="invoiceStatusFilter" class="p-2 border border-gray-300 rounded-md min-w-[140px]">
            <option value="All">All</option>
            <option value="Paid">Paid</option>
            <option value="Unpaid">Unpaid</option>
          </select>
        </div>
        <div>
          <label class="font-medium block mb-1">Filter by Month</label>
          <select id="invoiceMonthFilter" class="p-2 border border-gray-300 rounded-md min-w-[180px]">
            <option value="">-- All Months --</option>
          </select>
        </div>
        <div>
          <label class="font-medium block mb-1">Filter by Year</label>
          <input type="text" id="invoiceYearFilter" class="p-2 border border-gray-300 rounded-md min-w-[140px] text-center" placeholder="e.g. 2024">
        </div>
      </div>
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-100">
            <tr>
              <th class="py-2 px-3 text-xs font-semibold text-left">Invoice #</th>
              <th class="py-2 px-3 text-xs font-semibold text-left">Vendor</th>
              <th class="py-2 px-3 text-xs font-semibold text-left">Date</th>
              <th class="py-2 px-3 text-xs font-semibold text-left">Amount</th>
              <th class="py-2 px-3 text-xs font-semibold text-left">Check #</th>
              <th class="py-2 px-3 text-xs font-semibold text-left">Status</th>
            </tr>
          </thead>
          <tbody id="dgvInvoices" class="bg-white divide-y divide-gray-200">
            <tr><td colspan="6" class="text-center py-4 text-gray-500">No invoices to display.</td></tr>
          </tbody>
        </table>
      </div>
    </div>

    <!-- Edit Check -->
    <div id="edit-check-section" class="tab-content hidden">
      <h3 class="text-lg font-semibold text-gray-800 mb-3">Edit Check</h3>

      <div class="row-card mb-4">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
          <div>
            <label class="block text-sm font-medium mb-1">Search by Check Number</label>
            <input type="text" id="searchCheckNumber" class="w-full p-2 border rounded-md" placeholder="e.g. 10321">
          </div>
          <div>
            <button id="btnFindCheck" class="btn btn-primary mt-6 w-full">Find Check</button>
          </div>
          <div class="muted md:mt-6">You can also open this tab from “View Invoices” by clicking “Edit”.</div>
        </div>
      </div>

      <div id="checkEditor" class="hidden">
        <div class="row-card mb-4">
          <h4 class="font-semibold text-gray-800 mb-2">Check Details</h4>
          <div class="grid grid-cols-1 md:grid-cols-5 gap-4">
            <div>
              <label class="block text-sm font-medium mb-1">Check Number</label>
              <input type="text" id="editCheckNumber" class="w-full p-2 border rounded-md">
            </div>
            <div>
              <label class="block text-sm font-medium mb-1">Check Date</label>
              <input type="date" id="editCheckDate" class="w-full p-2 border rounded-md">
            </div>
            <div>
              <label class="block text-sm font-medium mb-1">Check Amount ($)</label>
              <input type="number" step="0.01" id="editCheckAmount" class="w-full p-2 border rounded-md">
            </div>
            <div>
              <label class="block text-sm font-medium mb-1">Notes</label>
              <input type="text" id="editCheckNotes" class="w-full p-2 border rounded-md" placeholder="Memo / notes">
            </div>
            <div class="flex items-end">
              <button id="btnSaveCheckEdits" class="btn btn-primary w-full">Save Check</button>
            </div>
          </div>
        </div>

        <div class="row-card">
          <div class="flex items-center justify-between mb-3">
            <h4 class="font-semibold text-gray-800">Invoices Linked to this Check</h4>
            <div class="flex gap-2">
              <button id="btnAddInvoiceRowEdit" class="btn btn-outline">+ Add invoice</button>
              <button id="btnSaveInvoicesEdit" class="btn btn-primary">Save new invoices</button>
            </div>
          </div>
          <div id="linkedInvoices" class="space-y-2"></div>
          <div id="newInvoicesForThisCheck" class="space-y-3 mt-4"></div>
        </div>
      </div>
    </div>

    <!-- Generate Report -->
    <div id="generate-report-section" class="tab-content hidden">
      <h3 class="text-lg font-semibold text-gray-800 mb-4">Generate Monthly Checks Report</h3>

      <div class="grid grid-cols-1 lg:grid-cols-3 gap-4 mb-6">
        <div class="lg:col-span-1">
          <label class="block mb-1 font-medium">Whole Month</label>
          <select id="quickMonth" class="w-full p-2 border rounded-md">
            <option value="custom">— Custom Range —</option>
          </select>
          <p class="muted mt-1">Pick a whole month (Aug 2025 → Dec 2030). Choose “Custom Range” to type exact dates.</p>
        </div>
        <div>
          <label class="block mb-1 font-medium">Start Date</label>
          <input type="date" id="reportStartDate" class="w-full p-2 border border-gray-300 rounded-md">
        </div>
        <div>
          <label class="block mb-1 font-medium">End Date</label>
          <input type="date" id="reportEndDate" class="w-full p-2 border border-gray-300 rounded-md">
        </div>
      </div>

      <div class="text-center">
        <button id="btnGenerateReport" class="btn btn-primary px-8">Download PDF Report</button>
      </div>
    </div>
  </div>

  <!-- Generic Modal -->
  <div id="custom-modal" class="modal">
    <div class="modal-content">
      <h3 id="modal-title" class="text-lg font-semibold mb-2"></h3>
      <p id="modal-message" class="text-sm"></p>
      <div class="modal-actions">
        <button id="modal-close-btn" class="btn btn-primary">OK</button>
      </div>
    </div>
  </div>

  <script>
    // libs
    window.jsPDF = window.jspdf.jsPDF;

    // Supabase
    const SUPABASE_URL = "https://kpldzwlftkvjjntgsqxx.supabase.co";
    const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtwbGR6d2xmdGt2ampudGdzcXh4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY2MzE5NzAsImV4cCI6MjA2MjIwNzk3MH0.qnWbOQv2RLPsIyO-oRwQkAN2VhmmdhTBt46SweUsLbs";
    const supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

    // Local date helpers (display MM/DD/YYYY)
    const fmtUS = (d)=> `${String(d.getMonth()+1).padStart(2,'0')}/${String(d.getDate()).padStart(2,'0')}/${d.getFullYear()}`;
    const parseYMDLocal = (s)=>{ const [y,m,d]=s.split('-').map(Number); return new Date(y,m-1,d); };
    const ymd = (y,m0,d)=> `${y}-${String(m0+1).padStart(2,'0')}-${String(d).padStart(2,'0')}`;
    const firstOfMonth = (y,m0)=> ymd(y,m0,1);
    const lastOfMonth  = (y,m0)=> ymd(y,m0,new Date(y,m0+1,0).getDate());
    const mmddyyyyFromYMD = (s)=> {
      if (!s) return '';
      try {
        const [y, m, d] = s.split('-').map(Number);
        const date = new Date(y, m - 1, d);
        return `${String(date.getMonth() + 1).padStart(2, '0')}/${String(date.getDate()).padStart(2, '0')}/${date.getFullYear()}`;
      } catch (e) {
        return s;
      }
    };

    // Logos
    const companyLogoUrl = "https://raw.githubusercontent.com/pgonzalez2910/jengchi-product-images/main/jengchilogo.jpg";
    const vendorLogos = {
      "City of Richardson": "https://raw.githubusercontent.com/pgonzalez2910/jengchi-product-images/main/richardson.jpg",
      "Eiland - Coffe": "https://raw.githubusercontent.com/pgonzalez2910/jengchi-product-images/main/eliand.jpg",
      "Taiwanese Student Association": "https://raw.githubusercontent.com/pgonzalez2910/jengchi-product-images/main/taiwanese.jpg",
      "Bakemark": "https://raw.githubusercontent.com/pgonzalez2910/jengchi-product-images/main/bakemark.jpg",
      "Delta Office Products": "https://raw.githubusercontent.com/pgonzalez2910/jengchi-product-images/main/delta.jpg",
      "Formosa Foods": "https://raw.githubusercontent.com/pgonzalez2910/jengchi-product-images/main/formosa.jpg",
      "North Food Group": "https://raw.githubusercontent.com/pgonzalez2910/jengchi-product-images/main/northfoodgroup.jpg",
      "Pacific Plus": "https://raw.githubusercontent.com/pgonzalez2910/jengchi-product-images/main/pacific.jpg",
      "Fortune": "https://raw.githubusercontent.com/pgonzalez2910/jengchi-product-images/main/fortune.jpg",
      "Supermarket": "https://raw.githubusercontent.com/pgonzalez2910/jengchi-product-images/main/supermarket.jpg"
    };
    const logoDataUrls = {};

    // UI helpers
    function showMessageModal(title, msg) {
      document.getElementById("modal-title").textContent = title;
      document.getElementById("modal-message").textContent = msg;
      document.getElementById("custom-modal").style.display = "flex";
    }
    function hideMessageModal() { document.getElementById("custom-modal").style.display = "none"; }

    function resetInvoiceManagementForm() {
      document.getElementById('newCheckNumber').value = '';
      document.getElementById('newCheckDate').value = '';
      document.getElementById('newCheckAmount').value = '';
      document.getElementById('newCheckNotes').value = '';
      document.getElementById('chkVoid').checked = false;
      document.getElementById('invoiceRows').innerHTML = '';
      addInvoiceRowInManagement();
    }

    // Tabs
    function setupTabs() {
      const tabs = {
        'invoice-management-tab': 'invoice-management-section',
        'view-invoices-tab': 'view-invoices-section',
        'edit-check-tab': 'edit-check-section',
        'generate-report-tab': 'generate-report-section'
      };
      const tabButtons = document.querySelectorAll('.tab-btn');
      tabButtons.forEach(button => {
        button.addEventListener('click', () => {
          tabButtons.forEach(btn => btn.classList.remove('active'));
          button.classList.add('active');
          for (const tid in tabs) document.getElementById(tabs[tid]).classList.add('hidden');
          document.getElementById(tabs[button.id]).classList.remove('hidden');
        });
      });
    }

    // Images preload
    async function preloadImages() {
      const getFileExtension = (url) => url.split('.').pop().split('?')[0].toLowerCase();
      const getMimeType = (ext) => {
          switch (ext) {
              case 'jpg':
              case 'jpeg': return 'image/jpeg';
              case 'png': return 'image/png';
              case 'svg': return 'image/svg+xml';
              default: return 'application/octet-stream';
          }
      };
      const getJsPDFFormat = (mimeType) => {
          if (mimeType === 'image/jpeg') return 'JPEG';
          if (mimeType === 'image/png') return 'PNG';
          return 'JPEG'; // Default to JPEG if unknown
      };

      const processImage = async (url) => {
          try {
              const response = await fetch(url);
              const blob = await response.blob();
              const reader = new FileReader();
              return new Promise(resolve => {
                  reader.onloadend = () => {
                      const mimeType = blob.type || getMimeType(getFileExtension(url));
                      resolve({
                          data: reader.result,
                          format: getJsPDFFormat(mimeType)
                      });
                  };
                  reader.readAsDataURL(blob);
              });
          } catch (e) {
              console.error(`Failed to preload image from ${url}:`, e);
              return { data: null, format: 'JPEG' };
          }
      };

      logoDataUrls['company'] = await processImage(companyLogoUrl);

      const vendorPromises = Object.keys(vendorLogos).map(async (vendorName) => {
          logoDataUrls[vendorName] = await processImage(vendorLogos[vendorName]);
      });
      await Promise.allSettled(vendorPromises);
    }

    // Vendors
    async function loadVendors() {
      const { data: vendors } = await supabase.from("public_vendors").select("vendor_name").order("vendor_name");
      const def = document.getElementById("defaultVendor");
      const invoiceVendorFilter = document.getElementById("invoiceVendorFilter");
      def.innerHTML = "";
      invoiceVendorFilter.innerHTML = '<option value="">-- All Vendors --</option>';
      if (vendors) {
        vendors.forEach(v => {
          if (v.vendor_name !== "AutoChlor") {
            def.add(new Option(v.vendor_name, v.vendor_name));
            invoiceVendorFilter.add(new Option(v.vendor_name, v.vendor_name));
          }
        });
      }
    }
    async function addVendorAction() {
      const name = document.getElementById("newVendorName").value.trim();
      if (!name) return showMessageModal('Error','Please enter a vendor name.');
      const { error } = await supabase.from("public_vendors").insert([{ vendor_name: name }]);
      if (error) { console.error(error); return showMessageModal('Error','Failed to add vendor.'); }
      showMessageModal('Success', `${name} added.`);
      document.getElementById("newVendorName").value = "";
      await loadVendors();
      refreshVendorSelectorsInRows();
      syncFirstRowVendorToDefault();
    }

    // Check create/update
    async function upsertCheckFromForm() {
      const number = (document.getElementById('newCheckNumber').value || '').trim();
      const dateStr = document.getElementById('newCheckDate').value || null; // 'YYYY-MM-DD'
      const notesInput = (document.getElementById('newCheckNotes').value || '').trim();
      const isVoid = document.getElementById('chkVoid').checked;
      const amtStr = document.getElementById('newCheckAmount').value;
      const amount = amtStr ? Number(amtStr) : 0;
      if (!number) { showMessageModal('Validation Error','Enter a Check Number.'); throw new Error('missing check number'); }
      const notes = isVoid ? (notesInput ? `VOID - ${notesInput}` : 'VOID') : (notesInput || null);

      const { data: existing } = await supabase.from('public_checks').select('id').eq('check_number', number).maybeSingle();
      if (existing?.id) {
        await supabase.from('public_checks').update({ check_date: dateStr, check_amount: amount, notes }).eq('id', existing.id);
        return { id: existing.id, amount };
      }
      const { data: inserted, error } = await supabase
        .from('public_checks')
        .insert([{ check_number: number, check_date: dateStr, check_amount: amount, notes }])
        .select('id, check_amount')
        .single();
      if (error) { console.error(error); showMessageModal('Error','Failed to create check.'); throw error; }
      return { id: inserted.id, amount: inserted.check_amount ?? amount };
    }

    // MULTI-INVOICE rows
    function makeInvoiceRow(vendorOptionsHtml, preset={}) {
      const wrap = document.createElement('div');
      wrap.className = 'row-card';
      wrap.innerHTML = `
        <div class="grid-sm">
          <div>
            <label class="block text-sm font-medium mb-1">Vendor</label>
            <select class="vendor w-full p-2 border rounded-md">${vendorOptionsHtml}</select>
          </div>
          <div>
            <label class="block text-sm font-medium mb-1">Invoice Date</label>
            <input type="date" class="invdate w-full p-2 border rounded-md" />
          </div>
          <div>
            <label class="block text-sm font-medium mb-1">Invoice Number</label>
            <input type="text" class="invnum w-full p-2 border rounded-md" placeholder="INV-" />
          </div>
          <div>
            <label class="block text-sm font-medium mb-1">Invoice Total ($)</label>
            <input type="number" step="0.01" class="invtotal w-full p-2 border rounded-md" />
          </div>
        </div>
        <div class="flex justify-end mt-2">
          <button class="btn btn-danger btnRemoveRow">Remove</button>
        </div>
      `;
      if (preset.vendor) wrap.querySelector('.vendor').value = preset.vendor;
      if (preset.date) wrap.querySelector('.invdate').value = preset.date;
      if (preset.number) wrap.querySelector('.invnum').value = preset.number;
      if (preset.total != null) wrap.querySelector('.invtotal').value = preset.total;
      wrap.querySelector('.btnRemoveRow').addEventListener('click', () => wrap.remove());
      return wrap;
    }
    function currentVendorOptionsHtml() {
      const def = document.getElementById('defaultVendor');
      return Array.from(def.options).map(o => `<option value="${o.value}">${o.textContent}</option>`).join('');
    }
    function refreshVendorSelectorsInRows() {
      const html = currentVendorOptionsHtml();
      document.querySelectorAll('#invoiceRows .vendor, #newInvoicesForThisCheck .vendor').forEach(sel => {
        const cur = sel.value; sel.innerHTML = html; if (cur) sel.value = cur;
      });
    }
    function addInvoiceRowInManagement() {
      const html = currentVendorOptionsHtml();
      const vendorDefault = document.getElementById('defaultVendor').value || '';
      const row = makeInvoiceRow(html, { vendor: vendorDefault });
      document.getElementById('invoiceRows').appendChild(row);
    }
    // << NEW: keep first row vendor in sync with default vendor
    function syncFirstRowVendorToDefault() {
      const firstRow = document.querySelector('#invoiceRows .row-card .vendor');
      if (firstRow) firstRow.value = document.getElementById('defaultVendor').value || '';
    }

    // Save multiple invoices
    async function saveMultipleInvoices() {
      let checkRef;
      try { checkRef = await upsertCheckFromForm(); } catch { return; }

      const rows = Array.from(document.querySelectorAll('#invoiceRows .row-card'));
      if (rows.length === 0 && !document.getElementById('chkVoid').checked) {
        return showMessageModal('Nothing to save','Add at least one invoice row or mark as Void/Empty.');
      }
      if (rows.length === 0 && document.getElementById('chkVoid').checked) {
        showMessageModal('Success','Void/empty check saved.');
        resetInvoiceManagementForm();
        await loadInvoices();
        return;
      }

      const payload = [];
      let invoiceSum = 0;
      for (const r of rows) {
        const vendor = r.querySelector('.vendor').value;
        const invdate = r.querySelector('.invdate').value; // 'YYYY-MM-DD'
        const invnum = r.querySelector('.invnum').value.trim();
        const invtotal = parseFloat(r.querySelector('.invtotal').value);
        if (!vendor || !invdate || !invnum || isNaN(invtotal)) {
          return showMessageModal('Validation Error','Each row needs Vendor, Date, Number, and Total.');
        }
        invoiceSum += invtotal;
        payload.push({ VendorName: vendor, InvoiceDate: invdate, InvoiceNumber: invnum, InvoiceTotal: invtotal, Status: "Paid", check_id: checkRef.id });
      }

      const diff = Math.abs((checkRef.amount || 0) - invoiceSum);
      if (diff > 0.01) {
        return showModal('Amount mismatch',
          `The sum of invoices ($${invoiceSum.toFixed(2)}) does not match the check amount ($${(checkRef.amount||0).toFixed(2)}).`);
      }

      const { error } = await supabase.from("public_invoices").insert(payload);
      if (error) { console.error(error); return showMessageModal('Error','Failed to save invoices.'); }

      showMessageModal('Success', `${payload.length} invoice(s) saved. Total matches the check amount.`);
      resetInvoiceManagementForm();
      await loadInvoices();
    }
    async function saveVoidCheckOnly() {
      try { await upsertCheckFromForm(); } catch { return; }
      showMessageModal('Success','Void/empty check saved.');
      resetInvoiceManagementForm();
    }

    // View Invoices (list still filters by invoice date)
    async function loadInvoices() {
      const selectedVendor = document.getElementById("invoiceVendorFilter").value;
      const selectedStatus = document.getElementById("invoiceStatusFilter").value;
      const selectedMonth = document.getElementById("invoiceMonthFilter").value;
      const selectedYear = document.getElementById("invoiceYearFilter").value;
      const tableBody = document.getElementById("dgvInvoices");
      tableBody.innerHTML = `<tr><td colspan="6" class="text-center py-4 text-gray-500">Loading...</td></tr>`;

      let query = supabase.from("public_invoices").select(`
        *,
        check:public_checks!public_invoices_check_fk ( id, check_number, check_date, check_amount )
      `);

      if (selectedVendor) query = query.eq("VendorName", selectedVendor);
      if (selectedStatus !== "All") query = query.eq("Status", selectedStatus);

      if (selectedMonth && selectedYear) {
        const startOfMonth = firstOfMonth(Number(selectedYear), Number(selectedMonth)-1);
        const endOfMonth   = lastOfMonth(Number(selectedYear), Number(selectedMonth)-1);
        query = query.gte("InvoiceDate", startOfMonth).lte("InvoiceDate", endOfMonth);
      } else if (selectedYear) {
        query = query.gte("InvoiceDate", `${selectedYear}-01-01`).lte("InvoiceDate", `${selectedYear}-12-31`);
      }

      const { data: invoices, error } = await query.order("InvoiceDate", { ascending: false });
      if (error || !invoices) { console.error(error); tableBody.innerHTML = `<tr><td colspan="6" class="text-center py-4 text-red-500">Error loading invoices.</td></tr>`; return; }
      if (invoices.length === 0) { tableBody.innerHTML = `<tr><td colspan="6" class="text-center py-4 text-gray-500">No invoices found.</td></tr>`; return; }

      tableBody.innerHTML = "";
      invoices.forEach(inv => {
        const row = document.createElement("tr");
        const formattedDate = inv.InvoiceDate ? mmddyyyyFromYMD(inv.InvoiceDate) : "N/A";
        const chk = inv.check || {};
        row.innerHTML = `
          <td class="py-2 px-3 text-sm text-gray-700">${inv.InvoiceNumber}</td>
          <td class="py-2 px-3 text-sm text-gray-700">${inv.VendorName}</td>
          <td class="py-2 px-3 text-sm text-gray-700">${formattedDate}</td>
          <td class="py-2 px-3 text-sm text-gray-700">$${Number(inv.InvoiceTotal).toFixed(2)}</td>
          <td class="py-2 px-3 text-sm text-gray-700">
            <div class="flex items-center gap-2">
              <span>${chk.check_number || 'N/A'}</span>
              ${chk.id ? `<button class="text-blue-600 underline text-xs" data-edit-check="${chk.id}">Edit</button>` : ''}
            </div>
          </td>
          <td class="py-2 px-3 text-sm text-gray-700">${inv.Status || 'Paid'}</td>
        `;
        tableBody.appendChild(row);
      });

      tableBody.querySelectorAll('[data-edit-check]').forEach(btn => {
        btn.addEventListener('click', () => {
          document.getElementById('edit-check-tab').click();
          loadCheckById(btn.getAttribute('data-edit-check'));
        });
      });
    }

    // ===== EDIT CHECK TAB =====
    let currentEditCheckId = null;

    async function loadCheckByNumber(number) {
      const { data, error } = await supabase.from('public_checks').select('*').eq('check_number', number).maybeSingle();
      if (error || !data) { showMessageModal('Not found', 'No check with that number.'); return; }
      return loadCheckIntoEditor(data);
    }
    async function loadCheckById(id) {
      const { data, error } = await supabase.from('public_checks').select('*').eq('id', id).single();
      if (error || !data) { showMessageModal('Error','Could not load check.'); return; }
      return loadCheckIntoEditor(data);
    }
    async function loadCheckIntoEditor(checkRow) {
      currentEditCheckId = checkRow.id;
      document.getElementById('checkEditor').classList.remove('hidden');
      document.getElementById('editCheckNumber').value = checkRow.check_number || '';
      document.getElementById('editCheckDate').value = checkRow.check_date || '';
      document.getElementById('editCheckAmount').value = (typeof checkRow.check_amount === 'number' ? checkRow.check_amount : '');
      document.getElementById('editCheckNotes').value = checkRow.notes || '';
      await renderLinkedInvoices();
    }
    async function renderLinkedInvoices() {
      const box = document.getElementById('linkedInvoices');
      box.innerHTML = '<div class="muted">Loading invoices…</div>';
      const { data: invoices, error } = await supabase.from('public_invoices')
        .select('Id, VendorName, InvoiceDate, InvoiceNumber, InvoiceTotal')
        .eq('check_id', currentEditCheckId)
        .order('InvoiceDate', { ascending: true });
      if (error) { console.error(error); box.innerHTML = '<div class="text-red-500">Error loading invoices.</div>'; return; }
      if (!invoices || invoices.length === 0) { box.innerHTML = '<div class="muted">No invoices are linked to this check yet.</div>'; return; }

      box.innerHTML = '';
      invoices.forEach(inv => {
        const row = document.createElement('div');
        row.className = 'row-card';
        row.innerHTML = `
          <div class="grid-sm items-center">
            <div><div class="text-sm"><span class="font-semibold">${inv.VendorName}</span></div></div>
            <div><div class="text-sm">${inv.InvoiceDate ? mmddyyyyFromYMD(inv.InvoiceDate) : ''}</div></div>
            <div><div class="text-sm">${inv.InvoiceNumber}</div></div>
            <div><div class="text-sm">$${Number(inv.InvoiceTotal).toFixed(2)}</div></div>
          </div>
        `;
        box.appendChild(row);
      });
    }
    async function saveCheckEdits() {
      if (!currentEditCheckId) return;
      const payload = {
        check_number: (document.getElementById('editCheckNumber').value || '').trim(),
        check_date: document.getElementById('editCheckDate').value || null,
        check_amount: (document.getElementById('editCheckAmount').value ? Number(document.getElementById('editCheckAmount').value) : null),
        notes: document.getElementById('editCheckNotes').value || null
      };
      if (!payload.check_number) return showMessageModal('Validation','Check number is required.');
      const { error } = await supabase.from('public_checks').update(payload).eq('id', currentEditCheckId);
      if (error) { console.error(error); return showMessageModal('Error','Failed to save check.'); }
      showMessageModal('Success','Check updated.');
      await renderLinkedInvoices();
      await loadInvoices();
    }

    // Edit-tab add/save invoices
    function addInvoiceRowInEdit() {
      const html = currentVendorOptionsHtml();
      const row = makeInvoiceRow(html, {});
      document.getElementById('newInvoicesForThisCheck').appendChild(row);
    }
    async function saveNewInvoicesForThisCheck() {
      if (!currentEditCheckId) return showMessageModal('No check','Load a check first.');
      const rows = Array.from(document.querySelectorAll('#newInvoicesForThisCheck .row-card'));
      if (rows.length === 0) return showMessageModal('Nothing to save','Add at least one invoice row.');

      const payload = [];
      for (const r of rows) {
        const vendor = r.querySelector('.vendor').value;
        const invdate = r.querySelector('.invdate').value;
        const invnum = r.querySelector('.invnum').value.trim();
        const invtotal = parseFloat(r.querySelector('.invtotal').value);
        if (!vendor || !invdate || !invnum || isNaN(invtotal)) {
          return showMessageModal('Validation Error','Each row needs Vendor, Date, Number, and Total.');
        }
        payload.push({ VendorName: vendor, InvoiceDate: invdate, InvoiceNumber: invnum, InvoiceTotal: invtotal, Status: 'Paid', check_id: currentEditCheckId });
      }

      const { error } = await supabase.from('public_invoices').insert(payload);
      if (error) { console.error(error); return showMessageModal('Error','Failed to save invoices.'); }
      showMessageModal('Success', `${payload.length} invoice(s) added to this check.`);
      document.getElementById('newInvoicesForThisCheck').innerHTML = '';
      await renderLinkedInvoices();
      await loadInvoices();
    }

    // ===== REPORT grouped BY VENDOR with their CHECK NUMBERS =====
    async function generateMonthlyChecksReport() {
        const startDate = document.getElementById('reportStartDate').value;
        const endDate = document.getElementById('reportEndDate').value;

        // Colors (Hex to RGB for jsPDF)
        const NAVY = [30, 58, 138];
        const ROYAL_BLUE = [37, 99, 235];
        const SILVER = [156, 163, 175];
        const LIGHT_BLUE = [224, 232, 248];

        const { data: checks, error: chkErr } = await supabase
            .from("public_checks")
            .select("id, check_number, check_date, check_amount, notes")
            .gte("check_date", startDate)
            .lte("check_date", endDate)
            .order("check_date", { ascending: true });
        if (chkErr || !checks || checks.length === 0) {
            showMessageModal("No Data", "No checks in this range.");
            return;
        }

        const checkIds = checks.map(c => c.id);
        const { data: invoices, error: invErr } = await supabase
            .from("public_invoices")
            .select("VendorName, InvoiceDate, InvoiceNumber, InvoiceTotal, check_id")
            .in("check_id", checkIds);
        if (invErr) {
            console.error(invErr);
            showMessageModal("Error", "Could not load invoices.");
            return;
        }

        const checksById = new Map(checks.map(c => [c.id, c]));
        const vendorMap = new Map();
        const vendorTotals = new Map();
        const voidChecks = [];
        const hasInvoices = new Set();
        let grandTotal = 0;
        let totalChecksIssued = checks.length;
        let totalVoidChecks = 0;

        (invoices || []).forEach(inv => {
            hasInvoices.add(inv.check_id);
            const vendor = inv.VendorName || 'Unknown Vendor';
            if (!vendorMap.has(vendor)) vendorMap.set(vendor, new Map());
            const perVendorChecks = vendorMap.get(vendor);
            if (!perVendorChecks.has(inv.check_id)) perVendorChecks.set(inv.check_id, { invoices: [], subtotal: 0 });
            const bucket = perVendorChecks.get(inv.check_id);
            bucket.invoices.push(inv);
            const invTotal = Number(inv.InvoiceTotal) || 0;
            bucket.subtotal += invTotal;
            vendorTotals.set(vendor, (vendorTotals.get(vendor) || 0) + invTotal);
            grandTotal += invTotal;
        });

        checks.forEach(c => {
            if (!hasInvoices.has(c.id)) {
                voidChecks.push(c);
                totalVoidChecks++;
            }
        });

        const sortedVendorTotals = Array.from(vendorTotals.entries()).sort((a, b) => b[1] - a[1]);
        const topVendor = sortedVendorTotals.length ? sortedVendorTotals[0] : [null, 0];
        const totalVendors = vendorTotals.size;

        const { jsPDF } = window.jspdf;
        const doc = new jsPDF("p", "pt", "a4");
        const pageWidth = doc.internal.pageSize.getWidth();
        const pageHeight = doc.internal.pageSize.getHeight();
        let y = 0, margin = 40;

        // Cover Page
        doc.setFillColor(255, 255, 255);
        doc.rect(0, 0, pageWidth, pageHeight, "F");
        doc.setTextColor(0, 0, 0);
        doc.setFont("helvetica", "normal").setFontSize(14);
        doc.text("JENG CHI RESTAURANT", pageWidth / 2, 70, { align: "center" });
        doc.setFont("helvetica", "bold").setFontSize(32);
        doc.text("EXECUTIVE REPORT", pageWidth / 2, 110, { align: "center" });
        if (logoDataUrls.company && logoDataUrls.company.data) {
            doc.addImage(logoDataUrls.company.data, logoDataUrls.company.format, pageWidth / 2 - 40, 130, 80, 60);
        }
        doc.setFont("helvetica", "normal").setFontSize(16);
        doc.text(`Payments & Invoices`, pageWidth / 2, 220, { align: "center" });
        doc.setFontSize(12);
        doc.text(`For the Period: ${mmddyyyyFromYMD(startDate)} - ${mmddyyyyFromYMD(endDate)}`, pageWidth / 2, 240, { align: "center" });
        doc.addPage();
        y = margin;

        // Executive Summary
        doc.setTextColor(0, 0, 0);
        doc.setFont("helvetica", "bold").setFontSize(22);
        doc.text("Executive Summary", margin, y);
        y += 30;

        // Summary Cards
        const cardX = margin, cardSpacingX = 20, cardWidth = (pageWidth - margin * 2 - cardSpacingX) / 2;
        const cardHeight = 70;
        
        doc.setDrawColor(...SILVER);
        doc.setLineWidth(1);

        // Grand Total Card
        doc.roundedRect(cardX, y, cardWidth, cardHeight, 5, 5, "FD");
        doc.setFontSize(12).setTextColor(...ROYAL_BLUE);
        doc.text("Grand Total Paid", cardX + 10, y + 25);
        doc.setFontSize(22).setTextColor(...NAVY);
        doc.text(`$${grandTotal.toFixed(2)}`, cardX + 10, y + 50);

        // Top Vendor Card
        doc.roundedRect(cardX + cardWidth + cardSpacingX, y, cardWidth, cardHeight, 5, 5, "FD");
        doc.setFontSize(12).setTextColor(...ROYAL_BLUE);
        doc.text("Top Vendor", cardX + cardWidth + cardSpacingX + 10, y + 25);
        doc.setFontSize(16).setTextColor(...NAVY);
        doc.text(`${topVendor[0] || 'N/A'}`, cardX + cardWidth + cardSpacingX + 10, y + 45);
        doc.setFontSize(12).setTextColor(...NAVY);
        doc.text(`$${topVendor[1].toFixed(2)}`, cardX + cardWidth + cardSpacingX + 10, y + 60);

        y += cardHeight + 30;

        // Chart
        const mainVendors = ["Formosa Foods", "North Food Group", "Pacific Plus", "Delta Office Products", "Supermarket"];
        const mainVendorData = mainVendors.map(vendor => ({
            name: vendor,
            total: vendorTotals.get(vendor) || 0
        }));
        
        const chartLabels = mainVendorData.map(v => v.name);
        const chartValues = mainVendorData.map(v => v.total);
        const barColors = ["#2563EB", "#3B82F6", "#60A5FA", "#93C5FD", "#BFDBFE"];

        const chartCanvas = document.createElement('canvas');
        chartCanvas.width = 800;
        chartCanvas.height = 400;
        const chartCtx = chartCanvas.getContext('2d');
        const chart = new Chart(chartCtx, {
            type: 'bar',
            data: {
                labels: chartLabels,
                datasets: [{
                    label: 'Total Paid ($)',
                    data: chartValues,
                    backgroundColor: barColors,
                }]
            },
            options: {
                responsive: false,
                animation: false,
                plugins: {
                    legend: { display: false },
                    title: { display: true, text: 'Top Vendor Spending Breakdown', font: { size: 16 } }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        title: { display: true, text: 'Amount Paid ($)' }
                    },
                    x: {
                        title: { display: true, text: 'Vendor' }
                    }
                }
            }
        });
        chart.update();
        const chartImg = chartCanvas.toDataURL("image/png");

        const chartTargetW = pageWidth - margin * 2;
        const chartTargetH = Math.round(chartTargetW * (chartCanvas.height / chartCanvas.width));
        
        if (Number.isFinite(chartTargetW) && Number.isFinite(chartTargetH) && chartImg) {
            doc.addImage(chartImg, 'PNG', margin, y, chartTargetW, chartTargetH);
            y += chartTargetH + 20;
        } else {
            doc.setFont('helvetica', 'italic').setFontSize(10);
            doc.text('Chart unavailable', margin, y);
            y += 16;
        }

        // Void checks table
        if (voidChecks.length > 0) {
            if (y + 50 > pageHeight - margin) {
                doc.addPage();
                y = margin;
            }
            doc.setFont("helvetica", "bold").setFontSize(16);
            doc.text("Void / Empty Checks", margin, y);
            y += 20;
            const voidHeaders = ["Check #", "Date", "Amount", "Notes"];
            const voidData = voidChecks.map(c => [c.check_number, mmddyyyyFromYMD(c.check_date), `$${(Number(c.check_amount) || 0).toFixed(2)}`, c.notes || '']);
            doc.autoTable({
                startY: y,
                head: [voidHeaders],
                body: voidData,
                styles: { fontSize: 10, cellPadding: 2, overflow: 'linebreak' },
                headStyles: { fillColor: LIGHT_BLUE, textColor: NAVY, fontStyle: 'bold' },
                columnStyles: { 0: { cellWidth: 'auto' }, 1: { cellWidth: 'auto' }, 2: { cellWidth: 'auto' }, 3: { cellWidth: 'auto' } },
                didDrawPage: (data) => {
                    doc.setFontSize(8).setTextColor(SILVER[0],SILVER[1],SILVER[2]);
                    doc.text(`Page ${doc.internal.getNumberOfPages()}`, pageWidth - margin, pageHeight - 20, { align: 'right' });
                }
            });
            y = doc.autoTable.previous.finalY + 10;
        }
        
        doc.addPage();
        y = margin;

        // Vendor-by-Vendor Details
        doc.setFont("helvetica", "bold").setFontSize(22);
        doc.text("Vendor Details", margin, y);
        y += 20;

        const vendorsSorted = Array.from(vendorMap.keys()).sort((a, b) => a.localeCompare(b));
        for (const vendor of vendorsSorted) {
            const checksForVendor = vendorMap.get(vendor);
            const vendorTotal = vendorTotals.get(vendor) || 0;
            const requiredHeight = 50 + (checksForVendor.size * 50); // Estimate needed space
            if (y + requiredHeight > pageHeight - margin) {
                doc.addPage();
                y = margin;
            }

            doc.setFont("helvetica", "bold").setFontSize(18);
            doc.text(vendor, margin, y);
            doc.setFontSize(12).setTextColor(...ROYAL_BLUE);
            doc.text(`Total Paid: $${vendorTotal.toFixed(2)}`, margin, y + 15);
            y += 30;

            const tableData = [];
            const perChecksSorted = Array.from(checksForVendor.keys())
                .map(id => [id, checksById.get(id), checksForVendor.get(id)])
                .sort((a, b) => (a[1]?.check_date || '').localeCompare(b[1]?.check_date || ''));
            
            for (const [cid, cRow, bucket] of perChecksSorted) {
                if (bucket.invoices.length > 0) {
                    tableData.push([
                        `Check #${cRow?.check_number || 'N/A'}`,
                        cRow?.check_date ? mmddyyyyFromYMD(cRow.check_date) : 'N/A',
                        `$${(Number(cRow?.check_amount) || 0).toFixed(2)}`,
                        ''
                    ]);
                    bucket.invoices.sort((a, b) => (a.InvoiceDate || '').localeCompare(b.InvoiceDate || '')).forEach(inv => {
                        tableData.push([
                            `  ${inv.InvoiceNumber}`,
                            inv.InvoiceDate ? mmddyyyyFromYMD(inv.InvoiceDate) : 'N/A',
                            `$${(Number(inv.InvoiceTotal) || 0).toFixed(2)}`,
                            ''
                        ]);
                    });
                }
            }

            doc.autoTable({
                startY: y,
                head: [['Check #', 'Date', 'Amount', 'Invoice Details']],
                body: tableData,
                styles: { fontSize: 10, cellPadding: 2, overflow: 'linebreak' },
                headStyles: { fillColor: LIGHT_BLUE, textColor: NAVY, fontStyle: 'bold' },
                columnStyles: { 0: { cellWidth: 70 }, 1: { cellWidth: 80 }, 2: { cellWidth: 70 }, 3: { cellWidth: 'auto' } },
                margin: { left: margin },
                didDrawPage: (data) => {
                    doc.setFontSize(8).setTextColor(SILVER[0],SILVER[1],SILVER[2]);
                    doc.text(`Page ${doc.internal.getNumberOfPages()}`, pageWidth - margin, pageHeight - 20, { align: 'right' });
                }
            });
            y = doc.autoTable.previous.finalY + 10;
        }

        doc.save(`JengChi_Checks_Report_${startDate}_to_${endDate}.pdf`);
        showMessageModal("Report Generated", "PDF downloaded.");
    }

    // ====== QUICK MONTH (Aug 2025 → Dec 2030) ======
    function populateQuickMonth() {
      const sel = document.getElementById('quickMonth');
      const startYear = 2025, startMonth0 = 7; // August
      const endYear = 2030, endMonth0 = 11;    // December
      for (let y = startYear; y <= endYear; y++) {
        const mStart = (y === startYear) ? startMonth0 : 0;
        const mEnd   = (y === endYear)   ? endMonth0   : 11;
        for (let m0 = mStart; m0 <= mEnd; m0++) {
          const monthName = new Date(y, m0, 1).toLocaleString('en-US', { month: 'long' });
          const val = `${y}-${String(m0+1).padStart(2,'0')}`;
          const opt = document.createElement('option');
          opt.value = val;
          opt.textContent = `${monthName} ${y}`;
          sel.appendChild(opt);
        }
      }
    }
    function applyQuickMonthSelection() {
      const sel = document.getElementById('quickMonth');
      const rs = document.getElementById('reportStartDate');
      const re = document.getElementById('reportEndDate');
      if (sel.value === 'custom') { rs.disabled = false; re.disabled = false; return; }
      const [yy, mm] = sel.value.split('-').map(Number);
      const m0 = mm - 1;
      rs.value = firstOfMonth(yy, m0);
      re.value = lastOfMonth(yy, m0);
      rs.disabled = true; re.disabled = true;
    }

    // DOM Ready
    document.addEventListener("DOMContentLoaded", async () => {
      document.getElementById("modal-close-btn").onclick = hideMessageModal;

      setupTabs();
      await preloadImages();
      document.getElementById('company-logo').src = logoDataUrls['company'].data;

      // month/year filters in list
      const invoiceMonthFilter = document.getElementById('invoiceMonthFilter');
      const invoiceYearFilter = document.getElementById('invoiceYearFilter');
      const months = ["January","February","March","April","May","June","July","August","September","October","November","December"];
      const currentYear = new Date().getFullYear();
      months.forEach((m,i)=>{ const o=document.createElement('option'); o.value=i+1; o.textContent=m; invoiceMonthFilter.appendChild(o); });
      for (let i=currentYear;i>=2020;i--){ const o=document.createElement('option'); o.value=i; o.textContent=i; invoiceYearFilter.appendChild(o); }
      invoiceMonthFilter.value=""; invoiceYearFilter.value="";

      await loadVendors();
      await loadInvoices();

      // Invoice Management actions
      document.getElementById("btnAddVendor").addEventListener("click", addVendorAction);
      document.getElementById("btnAddInvoiceRow").addEventListener("click", addInvoiceRowInManagement);
      document.getElementById("btnClearInvoiceRows").addEventListener("click", ()=> document.getElementById('invoiceRows').innerHTML='');
      document.getElementById("btnSaveMultipleInvoices").addEventListener("click", saveMultipleInvoices);
      document.getElementById("btnSaveVoidCheck").addEventListener("click", saveVoidCheckOnly);

      // NEW: keep first row vendor synced to default vendor
      document.getElementById("defaultVendor").addEventListener("change", syncFirstRowVendorToDefault);

      // Edit Check actions
      document.getElementById("btnFindCheck").addEventListener("click", async ()=>{
        const num = (document.getElementById('searchCheckNumber').value||'').trim();
        if (!num) return showMessageModal('Enter number','Type a check number.');
        await loadCheckByNumber(num);
      });
      document.getElementById("btnAddInvoiceRowEdit").addEventListener("click", addInvoiceRowInEdit);
      document.getElementById("btnSaveInvoicesEdit").addEventListener("click", saveNewInvoicesForThisCheck);

      // Report controls
      populateQuickMonth();
      const rs = document.getElementById('reportStartDate');
      const re = document.getElementById('reportEndDate');
      const now = new Date();
      rs.value = firstOfMonth(now.getFullYear(), now.getMonth());
      re.value = lastOfMonth(now.getFullYear(), now.getMonth());
      document.getElementById('quickMonth').addEventListener('change', applyQuickMonthSelection);
      document.getElementById("btnGenerateReport").addEventListener("click", generateMonthlyChecksReport);

      // Start with one invoice row
      addInvoiceRowInManagement();
      syncFirstRowVendorToDefault();
    });

    // Wire edit save button (delegated)
    document.addEventListener('click', (e)=>{
      if (e.target && e.target.id === 'btnSaveCheckEdits') { saveCheckEdits(); }
    });
  </script>
</body>
</html>
